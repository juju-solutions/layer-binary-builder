#!/usr/bin/env python3

import os
import shutil
import hashlib
from git import Repo, Git
from charmhelpers.core import hookenv
from subprocess import check_call, Popen, check_output, PIPE
import json
import buildutils

HUE_GIT = 'https://github.com/cloudera/hue.git'
RELEASE_TAG = hookenv.action_get("release-tag")
SPARK_VERSION = hookenv.action_get("spark-version")

def get_prerequisits(builder):
    builder.add_apt_repository('ppa:webupd8team/java') 
    # install oracle java unattended
    ps = Popen(('echo', 'oracle-java7-installer shared/accepted-oracle-license-v1-1 select true'), stdout=PIPE)
    output = check_output(('debconf-set-selections'), stdin=ps.stdout)
    ps.wait()   
    package_names = ['ant',
                      'git',
                      'gcc',
                      'g++',
                      'libkrb5-dev',
                      'libmysqlclient-dev',
                      'libssl-dev',
                      'libsasl2-dev',
                      'libsasl2-modules-gssapi-mit',
                      'libsqlite3-dev',
                      'libtidy-0.99-0',
                      'libxml2-dev',
                      'libxslt1-dev',
                      'make',
                      'libldap2-dev',
                      'maven',
                      'python-dev',
                      'python-setuptools',
                      'libgmp3-dev',
                      'oracle-java7-installer',
                      'oracle-java7-set-default',
                      'asciidoc']
    builder.install_apt_packages(package_names)


def checkout_source(builder):
    '''
    Checkout source and switch to the right tag
    '''
    hookenv.log("Fetching source from {}".format(HUE_GIT))
    checkout = ''.join(['tags/', RELEASE_TAG])
    builder.checkout_source(HUE_GIT, checkout)


def build_binary(builder):
    hookenv.log("Building binaries for Hue {}".format(RELEASE_TAG))
    build_command = ['make', 'prod']
    environemnt = dict(os.environ.copy(),
                       'MAVEN_OPTIONS="-X -Dspark.version={}"'.format(SPARK_VERSION))
    builder.build_binary(build_command, env=environemnt)

        
def package(builder):
    '''
    Create the tar.gz and build and compute the sha 256 digest
    '''
    hookenv.log("Packaging binary")
    expected_output_dir = os.join(builder.workspace, "build/release/prod")
    produced_file = [f for f in os.listdir(expected_output_dir) 
                 if os.path.isfile(os.path.join(expected_output_dir, f))]
    full_path = os.path.join(expected_output_dir, produced_file[0])
    # {} will be replace with the first digits of the digest
    digest, final_file = builder.set_output_file(full_path)
    return digest, final_file


if __name__ == '__main__':
    final_filename_template = ''.join(["hue-", RELEASE_TAG, "_spark-", SPARK_VERSION, "-{}.tar.gz"])
    builder = buildutils.BuildHelper("hue", final_filename_template)
    hookenv.status_set('maintenance', 'Fetching prerequisits')
    get_prerequisits(builder)
    hookenv.status_set('maintenance', 'Checking out source')
    checkout_source(builder)
    hookenv.status_set('maintenance', 'Building binary')
    build_binary(builder)
    hookenv.status_set('maintenance', 'Finish packaging')
    shadigest,distfile = package(builder)
    hookenv.action_set({'sha256sum': shadigest})
    hookenv.action_set({'binary': distfile})
    hookenv.status_set('active', 'Ready')
